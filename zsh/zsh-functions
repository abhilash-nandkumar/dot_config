# Function to source files if they exist
function zsh_add_file() {
    [ -f "$ZDOTDIR/$1" ] && source "$ZDOTDIR/$1"
}

function zsh_add_plugin() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For plugins
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh" || \
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
    fi
}

function gdb_attach() {
	if [ $# -lt 1 ]; then
		echo "Usage: gdb_attach <process_name>"
		return;
	fi;
		local pid=$(ps -eo comm,pid | grep $1 | awk '{print $2}')
		echo "PID of $1 found $pid"
		# gdb -ex 'set target-async 1' -ex 'set non-stop on' -ex "attach $pid"
		gdb -ex "attach $pid"
}

function gdb_ros_node() {
	if [ $# -lt 2 ]; then
		echo "Usage: gdb_ros_node <pkg_name> <executable>"
		return;
	fi;
	local exec_path=$(catkin_find $1 $2)
	if [ -z "$exec_path" ]; then
		echo "Cound not find executable! Please make sure the package is built and sourced!"
		return;
	fi;
	echo "Executable found at $exec_path"
	gdb -q -ex 'break main' -ex run --args $exec_path "${@:3}"
}


function rostest_lldb {
	if [ $# -lt 2 ]; then
		echo "Usage: rostest_gdb package testname [test args]"
		echo "Use --gtest_filter=SomeRegex* to run specific tests only"
		return;
	fi;
	local exec_path=$(catkin_find $1 $2)
	if [ -z "$exec_path" ]; then
		echo "Cound not find executable! Please make sure the package is built and sourced!"
		return;
	fi;
	echo "Executable found at $exec_path"
    lldb $exec_path "${@:3}"
}

function zsh_add_completion() {
    PLUGIN_NAME=$(echo $1 | cut -d "/" -f 2)
    if [ -d "$ZDOTDIR/plugins/$PLUGIN_NAME" ]; then 
        # For completions
		completion_file_path=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
		fpath+="$(dirname "${completion_file_path}")"
        zsh_add_file "plugins/$PLUGIN_NAME/$PLUGIN_NAME.plugin.zsh"
    else
        git clone "https://github.com/$1.git" "$ZDOTDIR/plugins/$PLUGIN_NAME"
		fpath+=$(ls $ZDOTDIR/plugins/$PLUGIN_NAME/_*)
        [ -f $ZDOTDIR/.zccompdump ] && $ZDOTDIR/.zccompdump
    fi
	completion_file="$(basename "${completion_file_path}")"
	if [ "$2" = true ] && compinit "${completion_file:1}"
}


function single_ros_test {
	if [ $# -lt 2 ]; then
		echo "Usage: single_ros_test package testname [test args]"
		echo "Use --gtest_filter=SomeRegex* to run specific tests only"
		return;
	fi;
	catkin build "$1" --no-deps --make-args "$2" && rosrun "$1" "$2" "${@:3}"
}

function rostest_gdb {
	if [ $# -lt 2 ]; then
		echo "Usage: rostest_gdb package testname [test args]"
		echo "Use --gtest_filter=SomeRegex* to run specific tests only"
		return;
	fi;
	gdb --args "$(catkin_find "$1" "$2")" "${@:3}"
}


function ccon_test {
	if [ $# -lt 1 ]; then
		echo "Usage: ccon_test package" 
		return;
	fi;
	colcon test --ctest-args "tests" --packages-select $1 --event-handler console_direct+
}

function start_sim {
		sr1_ws
        if [ $# -eq 0 ]; then
                roslaunch ipa_navigation_simulation virtual_robot_nav.launch robot:=raw3-3 robot_env:=bmw-factory planning_backend:=move_base_flex_bt
                return;
        elif [ $# -eq 2 ]; then
                roslaunch ipa_navigation_simulation virtual_robot_nav.launch robot:="$1" robot_env:="$2" planning_backend:=move_base_flex_bt 
                return;
        else
                echo "Example start_sim raw3-3 ipa-apartment"
                return;
        fi 
}

function start_sim_full {
		sr1_ws
        if [ $# -eq 0 ]; then
                roslaunch ipa_navigation_simulation virtual_robot_nav.launch groundtruth_localization:=false robot:=raw3-3 robot_env:=bmw-factory planning_backend:=move_base_flex_bt teleport_robot_topic:=/gt_pose 
                return;
        elif [ $# -eq 2 ]; then
                roslaunch ipa_navigation_simulation virtual_robot_nav.launch groundtruth_localization:=false robot:="$1" robot_env:="$2" planning_backend:=move_base_flex_bt teleport_robot_topic:=/gt_pose 
                return;
        else
                echo "Example start_sim raw3-3 ipa-apartment"
                return;
        fi 
}

function start_nav {
		sr1_ws
        if [ $# -eq 0 ]; then
                roslaunch ipa_navigation ipa_navigation.launch robot:=raw3-3 robot_env:=bmw-factory localization_backend:=lts_ng cmd_vel:=/cmd_vel_nav
                return;
	elif [ $# -eq 2 ]; then
		roslaunch ipa_navigation ipa_navigation.launch robot:="$1" robot_env:="$2" localization_backend:=lts_ng cmd_vel:=/cmd_vel_nav
                return;
        else
                #echo "Usage: start_nav robot robot_env"
                #echo "Example start_nav raw3-3 ipa-apartment"
                return;
        fi
}

function sshuttle_str {
        if [ $# -lt 1 ]; then
                echo "Usage: sshutle_str user@ip_addr or sshuttle_str alias"
                echo "Example: sshutle_str kinexon@192.168.0.15 or sshuttle_str str203_extern"
                return;
        fi;
		sshuttle -NHvr $1
}

function if_ip_addr {
  ifconfig "${1}" | awk '/inet / {print $2}'
}

function prompted_dmenu {
  dmenu -f -l 30 -i -p "$(echo "${@:1}")"
}

function list_ros_masters {
  # Seems to be reliable for roscores, but technically the -p argument could be anywhere...
  pgrep -a rosmaster | awk '{print $6}' | sort
}

function with_rosmaster {
  local port
  port=$(ps -ax | awk '/[r]osmaster/ {print $9}' | sort | prompted_dmenu "${@:1}")
  ROS_MASTER_URI=http://localhost:${port} "${@:1}"
}

alias wrm='with_rosmaster'

function with_rosnode {
  rosnode list |  prompted_dmenu "${@:1}" | xargs -r "${@:1}"
}

alias rni='with_rosnode rosnode info'

function with_rostopic {
  rostopic list | prompted_dmenu "${@:1}" | xargs -r "${@:1}"
}

alias rti='with_rostopic rostopic info'

function exportrosmaster {
  local wifi_dev="wlp0s20f3"
  local lan_dev="enp0s31f6"

  local dev=${lan_dev}
  local uri="http://127.0.0.1:11311"

  if [ $# -ge 3 ]; then
    if [ "${3}" = "lan" ]; then
      dev=${lan_dev}
    elif [ "${3}" = "wifi" ]; then
      dev=${wifi_dev}
    else
      dev=${3}
    fi
  fi

  if [ $# -ge 2 ]; then
    uri="http://${2}"
  else
    dev="lo" # use loopback if nothing is specified
  fi

  local profile="local"
  if [ $# -ge 1 ]; then
    profile="${1}"
  fi

  local ip
  ip=$(if_ip_addr ${dev})

  export ROS_MASTER_URI=${uri}
  export ROS_IP=${ip}
  echo "Set ROS_MATER_URI=${uri} and ROS_IP=${ip} for preset ${profile} on device ${dev}"
}

function detect_on_network {
  nmap --open -p 11311 "${1}"/24 --host-timeout 2 -oG - | awk '/^[^#]/ {print $3" "$2":11311 wifi"}'
}

function srm_detect {
  local dev="wlp0s20f3"
  if [ $# -ge 1 ]; then
    dev="${1}"
  fi
  local ip
  ip=$(if_ip_addr ${dev})
  local candidates
  # TODO search on all devices?
  candidates=$(detect_on_network "${ip}") || return
  echo $candidates
  local selected
  selected=$(echo "${candidates}" | uniq | prompted_dmenu "set ros master") || return
  read -A args <<< $selected;
  exportrosmaster ${args}
}

function srp {
  export ROS_MASTER_URI=http://localhost:${1}
  export ROS_IP=127.0.0.1
  echo "Set ROS_MATER_URI=${ROS_MASTER_URI} and ROS_IP=${ROS_IP}"
}


