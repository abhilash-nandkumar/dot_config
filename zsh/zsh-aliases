#!/bin/sh
# alias j='z'
# alias f='zi'
alias g='lazygit'
alias zsh-update-plugins="find "$ZDOTDIR/plugins" -type d -exec test -e '{}/.git' ';' -print0 | xargs -I {} -0 git -C {} pull -q"
alias config_rc='vim $CONFIGDIR'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -A --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'
	alias diff='diff --color=auto'
    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# confirm before overwriting something
alias cp="cp -i"
alias mv='mv -i'
alias rm='rm -i'

alias gdb='gdb -q'
alias gdb_break='gdb -ex "break main" -ex run'
alias v='nvim'

# grep
alias -g gp='| grep -i'

# easier to read disk
alias df='df -h'     # human-readable sizes
alias du='du -shc $(pwd)/*'     # human-readable sizes
alias free='free -m' # show sizes in MB

# get top process eating memory
alias psmem='ps auxf | sort -nr -k 4 | head -5'

# get top process eating cpu ##
alias pscpu='ps auxf | sort -nr -k 3 | head -5'

# systemd
alias mach_list_systemctl="systemctl list-unit-files --state=enabled"

if [[ $TERM == "xterm-kitty" ]]; then
  alias ssh="kitty +kitten ssh"
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alhF'
alias l='ls -CF'

alias cdr1='cd ${WSDIR}/ros1_ws/'
alias cdr2='cd ${WSDIR}/ros2_ws/'

alias sr1='source /opt/ros/noetic/setup.zsh'
alias sr1_ws='sr1 && cdr1 && source install/setup.zsh'

alias sr2='source /opt/ros/jazzy/setup.zsh'
alias sr2_ws='sr2 && cdr2 && source install/setup.zsh'


# alias backend='conda activate backend'
alias provision='conda activate node'
alias ros1rviz='
sr1_ws
rviz -d $(rospack find ipa_navigation_config)/config/nav_config.rviz
'
alias ros2rviz='sr2 && rviz2 -d ${WSDIR}/rviz_config.rviz'
alias ros2_teleop='sr2_ws && ros2 run key_teleop key_teleop key_vel:=/node_cmd_vel_joy'
alias weather='curl -4 http://wttr.in/Stuttgart'
alias ncal3='ncal -3 -w'
alias sau='sudo apt update && apt list --upgradable'

alias stop_containers='
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)
'

# git
alias gc="git commit"
alias gs="git status"
alias gd="git difftool --dir-diff"
alias gf="git fetch"
alias gm="git merge"
alias gma="git merge --abort"
alias gr="git rebase"
alias gp="git push"
alias gpf="git push --force-with-lease"
alias gu="git unstage"
alias gg="git graph"
alias gl="git log --pretty --oneline --graph"
alias gA="git add -A"
alias gri="git rebase -i"
alias grc="git rebase --continue"
alias gra="git rebase --abort"


function rsource_ros2_base {
  local ROS_ROOT
  [ -d "/opt/ros/jazzy" ] && . /opt/ros/jazzy/setup.zsh
  [ -e /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh ]\
    && . /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh
  [ -e /usr/share/colcon_cd/function/colcon_cd.sh ]\
    && . /usr/share/colcon_cd/function/colcon_cd.sh
}

function rsource {
  local ROS_ROOT
  [ -d "/opt/ros/melodic" ] && ROS_ROOT="/opt/ros/melodic/setup.zsh"
  [ -d "/opt/ros/kinetic" ] && ROS_ROOT="/opt/ros/kinetic/setup.zsh"
  [ -d "/opt/ros/noetic" ] && ROS_ROOT="/opt/ros/noetic/setup.zsh"
  # ROS2 things
  [ -e /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh ]\
    && . /usr/share/colcon_argcomplete/hook/colcon-argcomplete.zsh
  [ -e /usr/share/colcon_cd/function/colcon_cd.sh ]\
    && . /usr/share/colcon_cd/function/colcon_cd.sh
	local WS_ROOT="git"
	local ws
  ws=$(pwd | grep -o -e "^/home/${USER}/${WS_ROOT}/[^\/]\+")
	if [ -z "$ws" ]; then
		echo "Not inside a workspace, sourcing from ${ROS_ROOT}";
		source "${ROS_ROOT}"
		return 0;
	fi
  for cs in "install" "devel"; do
    local Path="${ws}/${cs}/setup.zsh"
    if [ -e "${Path}" ]; then
      echo "Sourcing workspace in ${Path}";
      source "${Path}";
      return 0;
    fi
  done
  echo "Devel space not found";
  return 2;
}

function cdws {
  if [ $# -lt 1 ]; then
    echo "No ws!"
    return
  fi
  local workspace=~/git/${1}
  if [ -d "${workspace}" ]; then
    export ROS_WORKSPACE=${workspace}
		export RCUTILS_COLORIZED_OUTPUT=1
    cd "${workspace}/src/${1}" 2>/dev/null || cd "${workspace}/src/" || cd "${workspace}" || return
    if [ -e "${workspace}/.built_by" ]; then
			rsource_ros2_base
		else
			rsource
		fi
  fi
}

alias is_ros_workspace='[ -n "${ROS_WORKSPACE}" ] && [ -d "${ROS_WORKSPACE}" ] || (echo "Not a ROS workspace" && false)'
alias cdbase='is_ros_workspace && cd $ROS_WORKSPACE'
alias cds='is_ros_workspace && cd $ROS_WORKSPACE/src'
alias cdbuild='is_ros_workspace && cd $ROS_WORKSPACE/build'
alias cddev='is_ros_workspace && cd $ROS_WORKSPACE/devel/.private'

alias colb='${WSDIR}/colb/target/release/colb'
alias jazzy_container='docker exec -it jazzy_build zsh'
alias noetic_container='docker exec -it noetic_build zsh'


alias trace_lts2='ros2 service call /lts_ng/trace ipa_navigation_msgs/srv/Trace "backend_type: ''
filename: '/tmp/lts'
level: 3
"
'

alias node_vpn_connect="sudo openvpn --config /etc/openvpn/config.ovpn"
alias node_tool_simulate="node-tool --latest simulate --clean --robot-config ros2_robot.yaml --sim-config ros2_sim.yaml --provision"